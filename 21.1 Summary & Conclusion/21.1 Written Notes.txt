-> flask is a micro web framework for python, designed to be lightweight and flexible  
    -> it allows developers to build web applications quickly and with minimal complexity  
    -> flask provides the basic tools needed for web development, but it leaves more advanced features to be added through extensions  

-> the core of flask consists of routing, request handling, and templating  
    -> routes define the url patterns that map to specific functions in the application  
    -> requests are handled by flask's built-in request object, allowing you to access data from forms, urls, and headers  
    -> jinja2 templating engine is used to render html templates dynamically  

-> flask also supports restful apis, allowing you to build apis that return data in formats like json  
    -> flask's jsonify function helps to easily convert python data structures into json  
    -> you can define api endpoints using flask's route decorators, just like for regular web pages  

-> flask is designed to be extensible, and many third-party extensions are available  
    -> popular extensions include flask-sqlalchemy for database integration, flask-wtf for form handling, and flask-migrate for database migrations  
    -> extensions can be installed via pip and configured within the application  

-> flaskâ€™s development server makes it easy to test applications during development  
    -> you can run the server with a simple command and view your app in the browser as you make changes  
    -> flask's reloader automatically reloads the server when you change the code  

-> deployment of flask apps to production requires additional setup  
    -> you will often use wsgi servers like gunicorn to serve your flask app  
    -> you may also need a reverse proxy like nginx to handle incoming traffic  

-> flask provides a built-in debugger for development purposes  
    -> the debugger helps you to trace errors, examine the stack trace, and interact with the application while it is running  
    -> debugging should be disabled in production environments for security reasons  

-> testing in flask is facilitated through its test client  
    -> the test client allows you to simulate requests to your flask app and check the responses  
    -> flask also integrates with popular testing frameworks like pytest for more advanced testing setups  

-> to organise a flask application, you can structure your code into blueprints  
    -> blueprints allow you to group routes and handlers into modules, making the app more maintainable  
    -> each blueprint can have its own templates, static files, and routes  

-> flask is ideal for small to medium-sized applications, but it can scale to larger projects with the right extensions  
    -> flask gives you full control over how you structure your application, making it flexible for various project needs  

-> the flask ecosystem includes several useful tools for development  
    -> flask-login handles user authentication and session management  
    -> flask-restful simplifies the creation of rest apis  
    -> flask-mail allows you to send email messages from your app  
